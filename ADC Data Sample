#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "utils/uartstdio.h"
#include "utils/ustdlib.h"
#include "driverlib/pin_map.h"
#include "driverlib/adc.h"

uint32_t ADCDataRaw[4];
int flag = 1;
uint8_t TempDataBuf[256];
uint_fast32_t WriteIndex = 0;

void ADCDataGet()
{

	ADCIntClear(ADC0_BASE, 0);
	ADCSequenceDataGet(ADC0_BASE, 0, ADCDataRaw);
	flag = 1;

}

void WriteToBuffer()
{
	int y;
		for ( y = 0; y < 4; y++)
		{
			TempDataBuf[WriteIndex] = ADCDataRaw[y]%64;
			TempDataBuf[WriteIndex+1] = ADCDataRaw[y]>>6;
			TempDataBuf[WriteIndex+1] = TempDataBuf[WriteIndex+1] | 0b01000000;
			if (y%2 == 1)
			{
				TempDataBuf[WriteIndex] = TempDataBuf[WriteIndex] | 0b10000000;
				TempDataBuf[WriteIndex+1] = TempDataBuf[WriteIndex+1] | 0b10000000;
			}
			WriteIndex = WriteIndex+2;
		}
}
//***********************ADC Initialise **********************


void ADCInit()
{
	/*Enable ADC Peripheral*/
	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
	int a = SYSCTL_PERIPH_ADC0;
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);

	GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 );

	/*Configure ADC Peripheral*/
	ADCSequenceDisable(ADC0_BASE, 0); //Before Configuring ADC Sequencer 1, it should be OFF
	ADCClockConfigSet(ADC0_BASE, ADC_CLOCK_SRC_PIOSC| ADC_CLOCK_RATE_HALF, 1);
	/*Configure ADC Sequence*/
	ADCSequenceConfigure(ADC0_BASE, 0, ADC_TRIGGER_ALWAYS, 0);
	ADCSequenceStepConfigure(ADC0_BASE, 0, 0, ADC_CTL_CH3); //Sequencer Step 0
	ADCSequenceStepConfigure(ADC0_BASE, 0, 1, ADC_CTL_CH2); //Sequencer Step 1
	ADCSequenceStepConfigure(ADC0_BASE, 0, 2, ADC_CTL_CH1); //Sequencer Step 2
	ADCSequenceStepConfigure(ADC0_BASE, 0, 3, ADC_CTL_CH0| ADC_CTL_IE |ADC_CTL_END); //Sequencer Step 3

	/*Enable ADC sequence*/

	ADCSequenceEnable(ADC0_BASE, 0);
	ADCIntDisable(ADC0_BASE, 0);

	ADCIntRegister(ADC0_BASE, 0, ADCDataGet );

	/*Clear ADC Interrupt*/
	ADCIntClear(ADC0_BASE, 0);
	ADCIntEnable(ADC0_BASE, 0);
	IntMasterEnable();

}

void main()
{

	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |
            SYSCTL_XTAL_25MHZ);


	ADCInit();


	while (1)
	{
		if (flag == 1)
		{

			WriteToBuffer();
			flag = 0;
		}
		if (WriteIndex >= 255)
		{
			WriteIndex = 0;
		}
	}


}
